yarn run v1.22.4
$ npx hardhat run script/step6.ts --network custom

-------------xxl step 0 accounts -------------
******xxl user1 balance is : 9999.964756651999999999
******xxl user2 balance is : 9999.999953815999999999
******xxl user3 balance is : 9999.999953815999999999
******xxl user4 balance is : 9999.999999999999999999

-------------xxl step 6 upgrade bridgeV2 contract-------------
ContractFactory {
  bytecode: '0x6080604052615438806100136000396000f3fe60806040526004361061024a5760003560e01c806384db809f11610139578063c5ec8970116100b6578063d2c7fb741161007a578063d2c7fb74146108d7578063d556b5bf14610900578063d9caed1214610929578063e8437ee714610952578063f71d7a3d1461097b578063f7b1c6fe146109a657610251565b8063c5ec8970146107f2578063c8ba6c871461081d578063cb10f2151461085a578063ced72f8714610883578063d16fb999146108ae57610251565b8063a9cf69fa116100fd578063a9cf69fa1461070d578063b8fa37361461074a578063be2a08e514610773578063beab71311461079c578063c5b37c22146107c757610251565b806384db809f146106185780638c0c2631146106555780638f2839701461067e5780638f667892146106a757806391c404ac146106e457610251565b80634603ae38116101c7578063780cf0041161018b578063780cf00414610533578063799e0e751461055c5780637c359661146105855780637f79bea8146105b057806384a96ca5146105ed57610251565b80634603ae38146104275780634b0b919d14610450578063505987191461048d5780635de11799146104cd5780636a70d081146104f657610251565b806324c51e861161020e57806324c51e861461031c5780632d92f5d214610359578063318c136e146103825780633e4ae210146103ad5780633ee7094a146103ea57610251565b806305e2ca171461025357806307b7ed991461026f5780630a6d55d81461029857806322968885146102d557806324a084df1461030057610251565b3661025157005b005b61026d60048036038101906102689190613cd3565b6109d1565b005b34801561027b57600080fd5b50610296600480360381019061029191906135a1565b610cd6565b005b3480156102a457600080fd5b506102bf60048036038101906102ba9190613954565b610cea565b6040516102cc9190614861565b60405180910390f35b3480156102e157600080fd5b506102ea610d1d565b6040516102f79190614d4f565b60405180910390f35b61031a600480360381019061031591906135f3565b610d26565b005b34801561032857600080fd5b50610343600480360381019061033e9190613913565b610d79565b604051610350919061496d565b60405180910390f35b34801561036557600080fd5b50610380600480360381019061037b9190613a1c565b610d8b565b005b34801561038e57600080fd5b50610397610e20565b6040516103a49190614861565b60405180910390f35b3480156103b957600080fd5b506103d460048036038101906103cf9190613a8a565b610e44565b6040516103e19190614861565b60405180910390f35b3480156103f657600080fd5b50610411600480360381019061040c9190613b2b565b610e80565b60405161041e9190614b52565b60405180910390f35b34801561043357600080fd5b5061044e6004803603810190610449919061389e565b610f3d565b005b34801561045c57600080fd5b5061047760048036038101906104729190613ba3565b610fe0565b6040516104849190614d6a565b60405180910390f35b34801561049957600080fd5b506104b460048036038101906104af9190613b67565b611007565b6040516104c49493929190614a3a565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef91906137e3565b611051565b005b34801561050257600080fd5b5061051d600480360381019061051891906135a1565b61114f565b60405161052a919061496d565b60405180910390f35b34801561053f57600080fd5b5061055a6004803603810190610555919061366b565b61116f565b005b34801561056857600080fd5b50610583600480360381019061057e9190613bcc565b6111f2565b005b34801561059157600080fd5b5061059a611217565b6040516105a79190614988565b60405180910390f35b3480156105bc57600080fd5b506105d760048036038101906105d291906135a1565b61123b565b6040516105e4919061496d565b60405180910390f35b3480156105f957600080fd5b5061060261125b565b60405161060f9190614861565b60405180910390f35b34801561062457600080fd5b5061063f600480360381019061063a9190613954565b611285565b60405161064c9190614861565b60405180910390f35b34801561066157600080fd5b5061067c6004803603810190610677919061362f565b6112b8565b005b34801561068a57600080fd5b506106a560048036038101906106a091906135a1565b611335565b005b3480156106b357600080fd5b506106ce60048036038101906106c991906139b9565b611381565b6040516106db9190614861565b60405180910390f35b3480156106f057600080fd5b5061070b60048036038101906107069190613a8a565b61144b565b005b34801561071957600080fd5b50610734600480360381019061072f9190613da2565b6114a2565b6040516107419190614d34565b60405180910390f35b34801561075657600080fd5b50610771600480360381019061076c919061397d565b611567565b005b34801561077f57600080fd5b5061079a60048036038101906107959190613df1565b61157d565b005b3480156107a857600080fd5b506107b1611876565b6040516107be9190614d85565b60405180910390f35b3480156107d357600080fd5b506107dc611889565b6040516107e99190614d4f565b60405180910390f35b3480156107fe57600080fd5b5061080761188f565b6040516108149190614d4f565b60405180910390f35b34801561082957600080fd5b50610844600480360381019061083f91906135a1565b611895565b6040516108519190614988565b60405180910390f35b34801561086657600080fd5b50610881600480360381019061087c919061371d565b6118ad565b005b34801561088f57600080fd5b5061089861197f565b6040516108a59190614d4f565b60405180910390f35b3480156108ba57600080fd5b506108d560048036038101906108d0919061381f565b611989565b005b3480156108e357600080fd5b506108fe60048036038101906108f99190613d3f565b611a3a565b005b34801561090c57600080fd5b50610927600480360381019061092291906135a1565b611b06565b005b34801561093557600080fd5b50610950600480360381019061094b91906136ce565b611bda565b005b34801561095e57600080fd5b506109796004803603810190610974919061376c565b611bdf565b005b34801561098757600080fd5b50610990611cb7565b60405161099d9190614914565b60405180910390f35b3480156109b257600080fd5b506109bb611d45565b6040516109c89190614d4f565b60405180910390f35b6000600d600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090614c74565b60405180910390fd5b6000600c60008760ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905590508383600e60008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000209190610b22929190612fa6565b50600082905060016003811115610b3557fe5b8173ffffffffffffffffffffffffffffffffffffffff166315dae03e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190613a61565b6003811115610bbe57fe5b1415610bd757610bd2878787878787611d4e565b610ccd565b60006003811115610be457fe5b8173ffffffffffffffffffffffffffffffffffffffff166315dae03e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190613a61565b6003811115610c6d57fe5b1415610c8657610c81878787878787611e85565b610ccc565b600854341015610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290614bd4565b60405180910390fd5b5b5b50505050505050565b610cde611f75565b610ce781612005565b50565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006064905090565b610d2e6120ec565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d74573d6000803e3d6000fd5b505050565b6000610d848261217e565b9050919050565b60008060608484810190610d9f9190613aef565b809350819450505084846040908460400192610dbd9392919061514b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600060208201519050610e188160601c85611051565b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058181548110610e5157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f355780601f10610f0a57610100808354040283529160200191610f35565b820191906000526020600020905b815481529060010190602001808311610f1857829003601f168201915b505050505081565b610f456120ec565b60005b84849050811015610fd957848482818110610f5f57fe5b9050602002016020810190610f7491906135ca565b73ffffffffffffffffffffffffffffffffffffffff166108fc848484818110610f9957fe5b905060200201359081150290604051600060405180830381858888f19350505050158015610fcb573d6000803e3d6000fd5b508080600101915050610f48565b5050505050565b600c6020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b600f602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020160009054906101000a900460ff16908060030154905084565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111801561108357600080fd5b506040519080825280601f01601f1916602001820160405280156110b65781602001600182028036833780820191505090505b506040516110c49190614822565b60006040518083038185875af1925050503d8060008114611101576040519150601f19603f3d011682016040523d82523d6000602084013e611106565b606091505b505090508061114a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114190614c54565b60405180910390fd5b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b6111776120ec565b60008490508073ffffffffffffffffffffffffffffffffffffffff1663d9caed128585856040518463ffffffff1660e01b81526004016111b99392919061487c565b600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b505050505050505050565b6112018787878787878761221c565b61120e87878787876122ee565b50505050505050565b7fe86ee9f56944ada89e333f06eb40065a86b50a19c5c19dc94fe2d9e15cf947c881565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112c06120ec565b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b81526004016112fe9190614861565b600060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b50505050505050565b61133d6120ec565b80600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffff'... 33160 more characters,
  interface: Interface {
    fragments: [
      [ConstructorFragment], [EventFragment],    [EventFragment],
      [EventFragment],       [EventFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment],    [FunctionFragment], [FunctionFragment],
      [FunctionFragment]
    ],
    _abiCoder: AbiCoder { coerceFunc: null },
    functions: {
      'WETH_RESOURCEID()': [FunctionFragment],
      '__Bridge_init(uint8,uint256,uint256,address)': [FunctionFragment],
      '_bridgeAddress()': [FunctionFragment],
      '_burnList(address)': [FunctionFragment],
      '_chainID()': [FunctionFragment],
      '_contractWhitelist(address)': [FunctionFragment],
      '_depositCounts(uint8)': [FunctionFragment],
      '_depositRecords(uint64,uint8)': [FunctionFragment],
      '_executeWeth(bytes)': [FunctionFragment],
      '_expiry()': [FunctionFragment],
      '_fee()': [FunctionFragment],
      '_proposals(uint72,bytes32)': [FunctionFragment],
      '_recoverSigner2(bytes32,uint8,bytes32,bytes32)': [FunctionFragment],
      '_resourceIDToHandlerAddress(bytes32)': [FunctionFragment],
      '_resourceIDToTokenContractAddress(bytes32)': [FunctionFragment],
      '_safeTransferETH(address,uint256)': [FunctionFragment],
      '_signers(uint256)': [FunctionFragment],
      '_tokenContractAddressToResourceID(address)': [FunctionFragment],
      'adminChangeFee(uint256)': [FunctionFragment],
      'adminSetBurnable(address,address)': [FunctionFragment],
      'adminSetGenericResource(address,bytes32,address,bytes4,bytes4)': [FunctionFragment],
      'adminSetResource(address,bytes32,address)': [FunctionFragment],
      'adminWithdraw(address,address,address,uint256)': [FunctionFragment],
      'changeAdmin(address)': [FunctionFragment],
      'changeSuperSigner(address)': [FunctionFragment],
      'deposit(uint8,bytes32,bytes)': [FunctionFragment],
      'executeProposal(uint8,uint64,bytes,bytes32,bytes[],bytes)': [FunctionFragment],
      'executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[],bytes)': [FunctionFragment],
      'getAbiterList()': [FunctionFragment],
      'getBalanceOfContract()': [FunctionFragment],
      'getCurrentSuperSigner()': [FunctionFragment],
      'getFee()': [FunctionFragment],
      'getProposal(uint8,uint64,bytes32)': [FunctionFragment],
      'getV2Data()': [FunctionFragment],
      'isDuplicated(bytes[])': [FunctionFragment],
      'sendValue(address,uint256)': [FunctionFragment],
      'setAbiterList(address[],uint256,bytes[])': [FunctionFragment],
      'setBurnable(address)': [FunctionFragment],
      'setResource(bytes32,address)': [FunctionFragment],
      'transferFunds(address[],uint256[])': [FunctionFragment],
      'withdraw(address,address,uint256)': [FunctionFragment]
    },
    errors: {},
    events: {
      'Deposit(uint8,bytes32,uint64)': [EventFragment],
      'DepositRecord(address,uint8,bytes32,uint64,address,uint256)': [EventFragment],
      'ProposalEvent(uint8,uint64,uint8,bytes32,bytes32)': [EventFragment],
      'ProposalEventBatch(uint8,uint64[],uint8[],bytes32[],bytes32[])': [EventFragment]
    },
    structs: {},
    deploy: ConstructorFragment {
      name: null,
      type: 'constructor',
      inputs: [],
      payable: true,
      stateMutability: 'payable',
      gas: null,
      _isFragment: true
    },
    _isInterface: true
  },
  signer: SignerWithAddress {
    _isSigner: true,
    address: '0x41eA6aD88bbf4E22686386783e7817bB7E82c1ed',
    _signer: JsonRpcSigner {
      _isSigner: true,
      provider: [EthersProviderWrapper],
      _address: '0x41eA6aD88bbf4E22686386783e7817bB7E82c1ed',
      _index: null
    },
    provider: EthersProviderWrapper {
      _isProvider: true,
      _events: [],
      _emitted: [Object],
      formatter: [Formatter],
      anyNetwork: false,
      _networkPromise: [Promise],
      _maxInternalBlockNumber: -1024,
      _lastBlockNumber: -2,
      _pollingInterval: 4000,
      _fastQueryDate: 0,
      connection: [Object],
      _nextId: 42,
      _hardhatProvider: BackwardsCompatibilityProviderAdapter {
        _wrapped: AutomaticGasPriceProvider {
          _wrapped: AutomaticGasProvider {
            _wrapped: [AutomaticSenderProvider],
            _wrappedProvider: [AutomaticSenderProvider],
            _gasMultiplier: 1
          },
          _wrappedProvider: AutomaticGasProvider {
            _wrapped: [AutomaticSenderProvider],
            _wrappedProvider: [AutomaticSenderProvider],
            _gasMultiplier: 1
          }
        },
        _provider: AutomaticGasPriceProvider {
          _wrapped: AutomaticGasProvider {
            _wrapped: [AutomaticSenderProvider],
            _wrappedProvider: [AutomaticSenderProvider],
            _gasMultiplier: 1
          },
          _wrappedProvider: AutomaticGasProvider {
            _wrapped: [AutomaticSenderProvider],
            _wrappedProvider: [AutomaticSenderProvider],
            _gasMultiplier: 1
          }
        },
        sendAsync: [Function: bound sendAsync],
        send: [Function: bound send],
        _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction
      },
      _eventLoopCache: [Object],
      _network: [Object]
    }
  }
}
BigNumber { _hex: '0x00', _isBigNumber: true }
Done in 18.05s.
