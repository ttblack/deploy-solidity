{
  "version": "3.2",
  "log": [
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "5ffd7b16d152a8271873e5eae758631ef23e9aa12a89bf671ad7a4dd60e0d90a",
          "withoutMetadata": "059cda9197dd994767091e6281c04f91e9135d0599371f7320f768511856a87c",
          "linkedWithoutMetadata": "059cda9197dd994767091e6281c04f91e9135d0599371f7320f768511856a87c"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "5701db2eeae6089a24e37de540007c259988d32d5a142661c6717030a16f2140",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "aa4d0a29fece495de225797c3cf065ba379b4caf6a3b66702a83acd5e5977c55",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5004_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5004_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5004_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5004_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5423_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5423_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5423_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5423_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "58906b487eccf7a4ae8a6f4ee72505a04b507b5ca3271e433a20370f95ebf673",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "03a6a22a8f5b1d05444ba3296cdc7abb507d671c593b0eb76c209f1cda969627",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "9dfd3bdb7d14e03a663b35716aceb0f7b59f62f465b3278a492ef32743b3038f",
          "withoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8",
          "linkedWithoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "74fb659e928000dbdb169601a2dfa435752b70cf4207e906fc7d8b709c5886b6",
          "withoutMetadata": "4bac3768b3999b19e82acc314e635f0678377483116c039fdd04c4a2426b0d9e",
          "linkedWithoutMetadata": "4bac3768b3999b19e82acc314e635f0678377483116c039fdd04c4a2426b0d9e"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5003_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5003_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5422_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5422_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "9dfd3bdb7d14e03a663b35716aceb0f7b59f62f465b3278a492ef32743b3038f",
          "withoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8",
          "linkedWithoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:24",
        "version": {
          "withMetadata": "855617d6e8fa377baaca96ae9654af22c85fbeee1f378ffcd4abdcb4dd2878a9",
          "withoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474",
          "linkedWithoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:29"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:30"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:52"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))",
              "src": "contracts/Bridge.sol:54"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3168_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3168_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3158"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3158": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5010_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5010_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5429_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5429_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "5c46144445694860c065ecc8837891f9990b983ab48cfd5702e0a4b6180f6dea",
          "withoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1",
          "linkedWithoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:24",
        "version": {
          "withMetadata": "fda9f7e899f63069b857a13d07ef65177200086004be7dfadbf516e75912d288",
          "withoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474",
          "linkedWithoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:29"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:30"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:52"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))",
              "src": "contracts/Bridge.sol:54"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3168_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3168_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3158"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3158": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5010_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5010_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5429_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5429_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "5c46144445694860c065ecc8837891f9990b983ab48cfd5702e0a4b6180f6dea",
          "withoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1",
          "linkedWithoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:24",
        "version": {
          "withMetadata": "a16b19e2dc43393af2ebdb3ad9aa58abaa7cada12c17420d6c39a08b91056a64",
          "withoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474",
          "linkedWithoutMetadata": "e5ce0ab4f7e80733cfd27b3e841e5f8c7cffe012089bf7c3980842722bb64474"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:29"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:30"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:52"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))",
              "src": "contracts/Bridge.sol:54"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3168_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3168_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3158"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3158": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5010_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5010_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5010_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5429_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5429_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5429_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "5c46144445694860c065ecc8837891f9990b983ab48cfd5702e0a4b6180f6dea",
          "withoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1",
          "linkedWithoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:24",
        "version": {
          "withMetadata": "1ace0be393bdddc3ba165b9960a43b8b5122f7a344adc66af905722a8fb61b38",
          "withoutMetadata": "ecb47a43f1fabb01198065264999232db511ebd57e463988a00e7ffd51f1090a",
          "linkedWithoutMetadata": "ecb47a43f1fabb01198065264999232db511ebd57e463988a00e7ffd51f1090a"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:29"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:30"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:52"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))",
              "src": "contracts/Bridge.sol:54"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3168_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3168_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3168_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3158"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3158": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5004_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5004_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5004_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5004_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5423_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5423_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5423_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5423_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "5c46144445694860c065ecc8837891f9990b983ab48cfd5702e0a4b6180f6dea",
          "withoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1",
          "linkedWithoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "62d3d7d02e50c434771e9e3e4442c1ab6a2b249a8c59ded54e507ce385bcf928",
          "withoutMetadata": "ecb47a43f1fabb01198065264999232db511ebd57e463988a00e7ffd51f1090a",
          "linkedWithoutMetadata": "ecb47a43f1fabb01198065264999232db511ebd57e463988a00e7ffd51f1090a"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5003_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5003_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5422_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5422_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "5c46144445694860c065ecc8837891f9990b983ab48cfd5702e0a4b6180f6dea",
          "withoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1",
          "linkedWithoutMetadata": "f047fa8ee9d5da073d314e05f3eec3d5521b50f3e3d109af9aaa2334c8fac5a1"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "7334ee23a92c0ef8c8b0fbe86653513e85844c1c603a32a79524ee1a236da40a",
          "withoutMetadata": "1da2a782fdcbc1f01dc0965e7f87c42e1b25911e3eb03648e8c9289e3e894dfa",
          "linkedWithoutMetadata": "1da2a782fdcbc1f01dc0965e7f87c42e1b25911e3eb03648e8c9289e3e894dfa"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5003_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5003_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5422_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5422_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:13",
        "version": {
          "withMetadata": "3e49215c6aa8bb61fc28b3311e990cd13628348bc23b89c835d9eb7737db2f06",
          "withoutMetadata": "3c69f3c80e85550d5beb388302f6a78ee84739bcde8a33b87829211e5e60cf39",
          "linkedWithoutMetadata": "3c69f3c80e85550d5beb388302f6a78ee84739bcde8a33b87829211e5e60cf39"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:18"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "8313781cde49e4d8e428bdcbf9660959a35f826b8a4613765a04d65309d71854",
          "withoutMetadata": "4bac3768b3999b19e82acc314e635f0678377483116c039fdd04c4a2426b0d9e",
          "linkedWithoutMetadata": "4bac3768b3999b19e82acc314e635f0678377483116c039fdd04c4a2426b0d9e"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5003_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5003_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5003_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5422_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5422_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5422_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "f422f521c116f51da93d21545e6c78988be7189ca7bcbb67d8e779e9fbdcd3d1",
          "withoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8",
          "linkedWithoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "a8c5f51559c80f567351ed61df49fd1ffdd06619115201bd01a22104b708583c",
          "withoutMetadata": "dd8a33ba214cc00c644f8d140db8e76eac6eaed36b4c88178ecaa55e2fa8df09",
          "linkedWithoutMetadata": "dd8a33ba214cc00c644f8d140db8e76eac6eaed36b4c88178ecaa55e2fa8df09"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5029_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5029_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5029_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5029_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5448_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5448_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5448_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5448_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "34fe2f450028807060d78a1a089f40dc452ad71fd3b9b344417735ec50bfa78a",
          "withoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8",
          "linkedWithoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Pausable": {
        "src": "contracts/utils/Pausable.sol:14",
        "version": {
          "withMetadata": "f1b3795b59910c6793a36ffee274796cf6c1fcc03bcb583508b171ef5054537f",
          "withoutMetadata": "5257dd72b84bbeb973ee3c5423a8adc951cf7c1db009fb9ba2c1b9358cea5f97",
          "linkedWithoutMetadata": "5257dd72b84bbeb973ee3c5423a8adc951cf7c1db009fb9ba2c1b9358cea5f97"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/utils/Pausable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/utils/Pausable.sol:25"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC3156FlashBorrower": {
        "src": "contracts/interfaces/IERC3156FlashBorrower.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC3156FlashLender": {
        "src": "contracts/interfaces/IERC3156FlashLender.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC2612": {
        "src": "contracts/interfaces/IERC2612.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CentrifugeAsset": {
        "src": "contracts/CentrifugeAsset.sol:10",
        "version": {
          "withMetadata": "34abdbe5b01c2d9522d5a36c40743e9e33f337f5a5a29eae8d092409c8a14509",
          "withoutMetadata": "af112c6783a1a5d3db0a58ab1c2ae62ee19442c1dd9e35ac4b755127edd0be02",
          "linkedWithoutMetadata": "af112c6783a1a5d3db0a58ab1c2ae62ee19442c1dd9e35ac4b755127edd0be02"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "store(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CentrifugeAsset",
              "label": "_assetsStored",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/CentrifugeAsset.sol:11"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "d1c2dc4a0494775704b1b87b6331379365093d2722e1282f94cbbad03988d3c2",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "6ad6282ac13912b7ab6cc516505ab0bdd8eac0ae4b6e91e9ac4d11db94000236",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "6f92667edaf2a65713006e867e6553d7da01e0f15909598030c5c097ff966b9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "d2eb177ac127ed29ef8b494e079b10d92b4ca77ced521afcd85a7abdbc4271b1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "32f451d2f5aefb3131c35e333f304c3e96703938a379aed0c804954e6a0ecc96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "b8b4d1734806c5d937106625bfd58ed91814be5a1ddafa9c186f1b2c05eac066",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "2d1e51410590e3b6fe517bbeb2f089ed73de276437baf44040072b268a3a4731",
          "withoutMetadata": "d3ac3cbc263e7df2c2df744ce7f7172df1980f041a0355e1751f02dc6f185fdb",
          "linkedWithoutMetadata": "d3ac3cbc263e7df2c2df744ce7f7172df1980f041a0355e1751f02dc6f185fdb"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "9aae3bf110534097195029f5e570e324270a5aaecc83877263b3c7f4fd60887d",
          "withoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f",
          "linkedWithoutMetadata": "86e7a37de822670a60c04e6ca90286c0eaa7d4bcdee23030d5f58d32f8e3940f"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "ac7e02158f97a0067bee7483e118ffc44fd7ae959704ac0334d663caf3b75235",
          "withoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006",
          "linkedWithoutMetadata": "a9d10c59b12f52ad824ccadb8d3132dad2738dc7d7d4a7da3cc0f56b1398e006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "3e9b2749f5f23351135bebc02e47511c26dabf10aceaded2211e05d0ec6190ca",
          "withoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679",
          "linkedWithoutMetadata": "52b5c6f24fe4791148b16191e95ed964ee2b4e46c38f5257d767cc0c4b70d679"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "515d43e4fa438bb55a17950cdd4d44ff81429109bbc37a93a87b14426480e061",
          "withoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8",
          "linkedWithoutMetadata": "8450414f87f9d83253f42d55969192689c759d09b9b08b78c84e25d91e9340d8"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "a4b2f8c55c5b34a9153706223171c79d81cf2bfe1c788e512d1e627becce033c",
          "withoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870",
          "linkedWithoutMetadata": "fdad239735df596b247739f4fd93c3db1403d39c00f10e9796af5dd4ef2ac870"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5031_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5031_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5031_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5031_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "a0daa65ac750fd6dced0ccc6cee8982e08bb7b9355613db38275aa9f673db0ad",
          "withoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc",
          "linkedWithoutMetadata": "6521f6f469cdd65db1ab1e304ff7433c0e266a8705adab339e4d1dabd7bcd3fc"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5450_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5450_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5450_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5450_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "ce4de389a10bac4041af3cc06da8a931f25fb94ba41c7406b3b1f2ca86d8a910",
          "withoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e",
          "linkedWithoutMetadata": "02a02aaed27d6b5bf9ee96233b7c533f553a89f00568b43a5db9638506ac248e"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "76404c47b73ab7674863e59ed3fa88e38056488d925a4199b0915a4540530dfc",
          "withoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d",
          "linkedWithoutMetadata": "5a5b8c972ddf4770991cfad05da345ef0c4f593b29019b3cf8fa944170110c6d"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "34fe2f450028807060d78a1a089f40dc452ad71fd3b9b344417735ec50bfa78a",
          "withoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8",
          "linkedWithoutMetadata": "2395f8f4153da3835637191653e6e0ddf3f97e910430a6b6d9fb5b6505b0a3d8"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "cc25bfccb1286d44ac557891d9a91ce54f28a9a5ae1779cce6cc33a87c3d6ee2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "af2d131a462bc1e8cfd57a40f6b0baf516c3dfd628c561903c92429e1200c124",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "0baddaf8f460733c3f32c142ff2cbca970ca6b997fcb54b5c4c369c304fa7280",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "bb30254c10a763094f6401dd8a0bb394e65aabc47e326287275007edc775b79f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "ddfd640fe3f5aa11d2b1b56c08f5b3cd2b6bf219546ce53830d805ec3e1feeca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2490_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2189_storage"
                }
              ]
            },
            "t_struct(Set)2189_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "c19e3e192aec8681e8520a0cfb279865b5fd1e35b8ebacbd3c680cb2ced2aa0f",
          "withoutMetadata": "b28bd831aebcff3d310539e283875f94f97925af19d0e5960ef24b66f5c1a475",
          "linkedWithoutMetadata": "b28bd831aebcff3d310539e283875f94f97925af19d0e5960ef24b66f5c1a475"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)2822_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)2822_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)2812"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)2812": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2490_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2189_storage"
                }
              ]
            },
            "t_struct(Set)2189_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "d25a85e81909e654e071a00b3475fe8daa97e1181a933349c227b92e7ab47c11",
          "withoutMetadata": "b28bd831aebcff3d310539e283875f94f97925af19d0e5960ef24b66f5c1a475",
          "linkedWithoutMetadata": "b28bd831aebcff3d310539e283875f94f97925af19d0e5960ef24b66f5c1a475"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)2822_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)2822_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)2812"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)2812": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2490_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2189_storage"
                }
              ]
            },
            "t_struct(Set)2189_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "d2e24768b365460c0a4f03fcabbda6ca588b9bf85269c3db3c4819c72a54c99c",
          "withoutMetadata": "cf2436fdc93295887647c4c440ff544ceb0842c787e217e9ec755dbbf3a3e988",
          "linkedWithoutMetadata": "cf2436fdc93295887647c4c440ff544ceb0842c787e217e9ec755dbbf3a3e988"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)2822_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)2822_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)2812"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)2812": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2490_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2189_storage"
                }
              ]
            },
            "t_struct(Set)2189_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "2ab865afcee630d976b74356de5ef2b26b043dddc5bee71b418c8a2191a97259",
          "withoutMetadata": "c744385dce3623ce0af6cdaccedb066d3e7be5b67157b2b223f9e1def7e1b40c",
          "linkedWithoutMetadata": "c744385dce3623ce0af6cdaccedb066d3e7be5b67157b2b223f9e1def7e1b40c"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)2822_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)2822_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)2812"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)2812": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2490_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2490_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2189_storage"
                }
              ]
            },
            "t_struct(Set)2189_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "a72482355fb34f4cdb8578ce8f3d481199014232bcfe40d560f044e2563465ca",
          "withoutMetadata": "760e9a35fe4ad5440ad78f0d80ec3e31c4e2c6c4ae88adfb7bb376ed90463a8d",
          "linkedWithoutMetadata": "760e9a35fe4ad5440ad78f0d80ec3e31c4e2c6c4ae88adfb7bb376ed90463a8d"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "transferFunds(address payable[],uint256[])",
          "_safeTransferETH(address,uint256)",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "isDuplicated(bytes[])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)2822_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)2822_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)2822_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)2812"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)2812": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "43bf338926e0f300052f3487e89fdfb0cffea1b034ae12a90fd0fe5888976483",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "d6fe532df2173b8107ac9c63fb62d21337a945cbab17e13f6b8540037334be20",
          "withoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1",
          "linkedWithoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "_executeWeth(bytes)",
          "transferFunds(address payable[],uint256[])",
          "_safeTransferETH(address,uint256)",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "isDuplicated(bytes[])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "4bfd967bfbcf4d92667ff9e1e9d7702d336cc828c3af73d1044a710e557a564b",
          "withoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d",
          "linkedWithoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "0b696be03d7ab8ea28107df9d6d8af69ca977cb1b4cd0f03248419d4939779c3",
          "withoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb",
          "linkedWithoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "bb71d74d04056f00c2bcf0ba3d0f1f1cd1a361a110cb44fe30e9a37717fdb784",
          "withoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972",
          "linkedWithoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5103_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5103_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5103_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5103_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "43bf338926e0f300052f3487e89fdfb0cffea1b034ae12a90fd0fe5888976483",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "5c7bb135fa981ba54320d7f92528c7d291b5de9b36464dcf1f1a919a7ea77123",
          "withoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1",
          "linkedWithoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "_executeWeth(bytes)",
          "transferFunds(address payable[],uint256[])",
          "_safeTransferETH(address,uint256)",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "isDuplicated(bytes[])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "4bfd967bfbcf4d92667ff9e1e9d7702d336cc828c3af73d1044a710e557a564b",
          "withoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d",
          "linkedWithoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "0b696be03d7ab8ea28107df9d6d8af69ca977cb1b4cd0f03248419d4939779c3",
          "withoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb",
          "linkedWithoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "6ada346dfdb723e48f87144b0e7f8fd10075b75ed03479a492b5061d8f99ffa1",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "8e4fccdaabb46eb1b70f30e4629221fe12b65c5469177fc5e1c4d784c048ba0e",
          "withoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972",
          "linkedWithoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5103_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5103_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5103_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5103_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "610964d02610a56581085524e319167185f2d3dbe470ccdc801fdfcfbde17a43",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "b5883c5f782c418494a0e8366cd7df514505fb8c4f22fcda1d02399b5212eae7",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "afaf7fe39bb1f78a34888fd2e12f0ca5e4a1112883ed6a98acf057e07169c917",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2835_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2835_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2534_storage"
                }
              ]
            },
            "t_struct(Set)2534_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/utils/Pausable.sol:14",
        "version": {
          "withMetadata": "4b9cc98d0d135576cfe44ea8cac2ec18d11011eaf42297e9da9cba265ada87e5",
          "withoutMetadata": "e2090bd90d7ca27e48c90cfc0b8f53484e663da8b4b5d63cdfe3f135e641783f",
          "linkedWithoutMetadata": "e2090bd90d7ca27e48c90cfc0b8f53484e663da8b4b5d63cdfe3f135e641783f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/utils/Pausable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/utils/Pausable.sol:25"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "e2bf450e4e70277dd28fb7da57e7cc791baaf77dd06325da49097a9a23908a54",
          "withoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78",
          "linkedWithoutMetadata": "b924a240666455f37cce7c566fd462ba56daaed4d4baee92e754e74ea7a70c78"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "59fe9764611f894d5307f1fa4368f237ee228fe1c572f5c0a319a8c12c653f74",
          "withoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98",
          "linkedWithoutMetadata": "430c42322bcbbb7ef329de88a70fa9a5ff2cbb14bd059fa74fd7efe50be09a98"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45bb5a651b7483b1e6b76f2a0e2db5c2affc899b557fbf97e949f2a517b4bb42",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Checker": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol:14",
        "version": {
          "withMetadata": "43bf338926e0f300052f3487e89fdfb0cffea1b034ae12a90fd0fe5888976483",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "75abf327fca3eeb8e9bed3873341ae35ae103ceffdda7ed8e28dec0fbdfa2d5f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "11ceec198cc00e1e09925cf93a1f307ff61f473cae86a8695fa5df4ed37cdbc8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bridge": {
        "src": "contracts/Bridge.sol:22",
        "version": {
          "withMetadata": "d6fe532df2173b8107ac9c63fb62d21337a945cbab17e13f6b8540037334be20",
          "withoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1",
          "linkedWithoutMetadata": "37bc5b763057049f58f4509479ad4466b9fb188ef9236c56e838e562272f0bb1"
        },
        "inherit": [
          "AdminUpgradeable",
          "Initializable",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "__Bridge_init(uint8,uint256,uint256)",
          "changeAdmin(address)",
          "renounceAdmin(address)",
          "adminSetResource(address,bytes32,address)",
          "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)",
          "adminSetBurnable(address,address)",
          "getProposal(uint8,uint64,bytes32)",
          "adminChangeFee(uint256)",
          "getFee()",
          "adminWithdraw(address,address,address,uint256)",
          "deposit(uint8,bytes32,bytes)",
          "executeProposal(uint8,uint64,bytes,bytes32,bytes[])",
          "executeProposalBatch(uint8,uint64[],bytes[],bytes32[],bytes[])",
          "_executeWeth(bytes)",
          "transferFunds(address payable[],uint256[])",
          "_safeTransferETH(address,uint256)",
          "setAbiterList(address[],uint256,bytes[])",
          "getAbiterList()",
          "getBalanceOfContract()",
          "sendValue(address payable,uint256)",
          "isDuplicated(bytes[])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Bridge",
              "label": "_chainID",
              "type": "t_uint8",
              "src": "contracts/Bridge.sol:24"
            },
            {
              "contract": "Bridge",
              "label": "_fee",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:25"
            },
            {
              "contract": "Bridge",
              "label": "_expiry",
              "type": "t_uint256",
              "src": "contracts/Bridge.sol:26"
            },
            {
              "contract": "Bridge",
              "label": "_isFirstSet",
              "type": "t_bool",
              "src": "contracts/Bridge.sol:27"
            },
            {
              "contract": "Bridge",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Bridge.sol:28"
            },
            {
              "contract": "Bridge",
              "label": "_depositCounts",
              "type": "t_mapping(t_uint8,t_uint64)",
              "src": "contracts/Bridge.sol:46"
            },
            {
              "contract": "Bridge",
              "label": "_resourceIDToHandlerAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/Bridge.sol:48"
            },
            {
              "contract": "Bridge",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))",
              "src": "contracts/Bridge.sol:50"
            },
            {
              "contract": "Bridge",
              "label": "_proposals",
              "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))",
              "src": "contracts/Bridge.sol:52"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_uint64)": {
              "label": "mapping(uint8 => uint64)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
              "label": "mapping(uint64 => mapping(uint8 => bytes))"
            },
            "t_mapping(t_uint8,t_bytes_storage)": {
              "label": "mapping(uint8 => bytes)"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)3167_storage))": {
              "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))"
            },
            "t_uint72": {
              "label": "uint72"
            },
            "t_mapping(t_bytes32,t_struct(Proposal)3167_storage)": {
              "label": "mapping(bytes32 => struct Bridge.Proposal)"
            },
            "t_struct(Proposal)3167_storage": {
              "label": "struct Bridge.Proposal",
              "members": [
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_dataHash",
                  "type": "t_bytes32"
                },
                {
                  "label": "_status",
                  "type": "t_enum(ProposalStatus)3157"
                },
                {
                  "label": "_proposedBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(ProposalStatus)3157": {
              "label": "enum Bridge.ProposalStatus",
              "members": [
                "Inactive",
                "Active",
                "Passed",
                "Executed",
                "Cancelled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CentrifugeAsset": {
        "src": "contracts/CentrifugeAsset.sol:10",
        "version": {
          "withMetadata": "71bceff120772a51f5ef0e84ffcd952163c08acb88666e19a32067295364a730",
          "withoutMetadata": "00db3c73ce5765136b07820724463710d1808a8a0c394cfbcad75c94fee7615e",
          "linkedWithoutMetadata": "00db3c73ce5765136b07820724463710d1808a8a0c394cfbcad75c94fee7615e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "store(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CentrifugeAsset",
              "label": "_assetsStored",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/CentrifugeAsset.sol:11"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Safe": {
        "src": "contracts/ERC20Safe.sol:15",
        "version": {
          "withMetadata": "0ea00e655796e1041bf1e66671ae25137c90810ff8c6b0b739cae3aa019830c7",
          "withoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a",
          "linkedWithoutMetadata": "ae352ba28982af5795fcd0d75a9a5cdfd35d91a6142196a8872dd2c77747b08a"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MinterBurnerPauser": {
        "src": "contracts/ERC721MinterBurnerPauser.sol:7",
        "version": {
          "withMetadata": "4bfd967bfbcf4d92667ff9e1e9d7702d336cc828c3af73d1044a710e557a564b",
          "withoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d",
          "linkedWithoutMetadata": "ba57b9ab5ee7040e576607c720527a75c5cd61a8cbd73ddd7178ff40b191775d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,string)",
          "mint(address,uint256,string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Safe": {
        "src": "contracts/ERC721Safe.sol:14",
        "version": {
          "withMetadata": "0b696be03d7ab8ea28107df9d6d8af69ca977cb1b4cd0f03248419d4939779c3",
          "withoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb",
          "linkedWithoutMetadata": "d44ef435eab93e9a938734386e499871992daab82b59037faeb9cf6fa03ea9cb"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "fundERC721(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Handler": {
        "src": "contracts/handlers/ERC20Handler.sol:15",
        "version": {
          "withMetadata": "e182cd5f3c5460eb0962de3d7abb8548502144593b4cd1a2548528150dde07fc",
          "withoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2",
          "linkedWithoutMetadata": "40df1fc148f3c29d028db5a7324ef2604520cf828ea373f13d7876b3c31643b2"
        },
        "inherit": [
          "ERC20Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Handler",
            "src": "contracts/handlers/ERC20Handler.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/ERC20Handler.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Handler": {
        "src": "contracts/handlers/ERC721Handler.sol:19",
        "version": {
          "withMetadata": "bb71d74d04056f00c2bcf0ba3d0f1f1cd1a361a110cb44fe30e9a37717fdb784",
          "withoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972",
          "linkedWithoutMetadata": "e1381b4a77040977542d28466effc919a09c87d00ec3e10b0b1c092013c4a972"
        },
        "inherit": [
          "ERC721Safe",
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "withdraw(address,address,uint256)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Handler",
            "src": "contracts/handlers/ERC721Handler.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Handler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5141_storage))",
              "src": "contracts/handlers/ERC721Handler.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5141_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct ERC721Handler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5141_storage)": {
              "label": "mapping(uint64 => struct ERC721Handler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5141_storage": {
              "label": "struct ERC721Handler.DepositRecord",
              "members": [
                {
                  "label": "_tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_destinationRecipientAddress",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_tokenID",
                  "type": "t_uint256"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GenericHandler": {
        "src": "contracts/handlers/GenericHandler.sol:13",
        "version": {
          "withMetadata": "e66ead601f53f72f7341d7edde1482166d6207b19d88a9cee009c29fcf0c8f73",
          "withoutMetadata": "08b9cf328da57e93b2ee7ddb4d53c4162ac7b62a80fad90a054be8dae651adad",
          "linkedWithoutMetadata": "08b9cf328da57e93b2ee7ddb4d53c4162ac7b62a80fad90a054be8dae651adad"
        },
        "inherit": [
          "IGenericHandler"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],bytes4[],bytes4[])",
          "getDepositRecord(uint64,uint8)",
          "setResource(bytes32,address,bytes4,bytes4)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenericHandler",
            "src": "contracts/handlers/GenericHandler.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GenericHandler",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/GenericHandler.sol:14"
            },
            {
              "contract": "GenericHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5560_storage))",
              "src": "contracts/handlers/GenericHandler.sol:24"
            },
            {
              "contract": "GenericHandler",
              "label": "_resourceIDToContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/GenericHandler.sol:27"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/GenericHandler.sol:30"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToDepositFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:33"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractAddressToExecuteFunctionSignature",
              "type": "t_mapping(t_address,t_bytes4)",
              "src": "contracts/handlers/GenericHandler.sol:36"
            },
            {
              "contract": "GenericHandler",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/GenericHandler.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)5560_storage))": {
              "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_struct(DepositRecord)5560_storage)": {
              "label": "mapping(uint64 => struct GenericHandler.DepositRecord)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_struct(DepositRecord)5560_storage": {
              "label": "struct GenericHandler.DepositRecord",
              "members": [
                {
                  "label": "_destinationChainID",
                  "type": "t_uint8"
                },
                {
                  "label": "_depositer",
                  "type": "t_address"
                },
                {
                  "label": "_resourceID",
                  "type": "t_bytes32"
                },
                {
                  "label": "_metaData",
                  "type": "t_bytes_storage"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bytes4)": {
              "label": "mapping(address => bytes4)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "HandlerHelpers": {
        "src": "contracts/handlers/HandlerHelpers.sol:15",
        "version": {
          "withMetadata": "97004be881e4f65c807c0da078f79efb1c6fbdf4ebb707ac6650db5b103d4f1c",
          "withoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5",
          "linkedWithoutMetadata": "784f7142444926177df41cce40dc06a67eb81cd98257898dff74041048d914b5"
        },
        "inherit": [
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler"
        ],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)",
          "_recoverSigner2(bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "HandlerHelpers",
              "label": "_bridgeAddress",
              "type": "t_address",
              "src": "contracts/handlers/HandlerHelpers.sol:16"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_resourceIDToTokenContractAddress",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/handlers/HandlerHelpers.sol:19"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_tokenContractAddressToResourceID",
              "type": "t_mapping(t_address,t_bytes32)",
              "src": "contracts/handlers/HandlerHelpers.sol:22"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_contractWhitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:25"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_burnList",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/handlers/HandlerHelpers.sol:28"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_signers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/handlers/HandlerHelpers.sol:95"
            },
            {
              "contract": "HandlerHelpers",
              "label": "_totalCount",
              "type": "t_uint256",
              "src": "contracts/handlers/HandlerHelpers.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHHandler": {
        "src": "contracts/handlers/WETHHandler.sol:14",
        "version": {
          "withMetadata": "3de1838e6e21e0f62481814afe0b528add50df4360494f276b9c749ccccfabe2",
          "withoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c",
          "linkedWithoutMetadata": "c0ed18308bd2acdc80f5054869dc8d5af3e28a24e57c2b9c6084454bf361d81c"
        },
        "inherit": [
          "HandlerHelpers",
          "Seriality",
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes",
          "IERCHandler",
          "IDepositExecute"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes32[],address[],address[])",
          "getDepositRecord(uint64,uint8)",
          "deposit(bytes32,uint8,uint64,address,bytes)",
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHHandler",
            "src": "contracts/handlers/WETHHandler.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHHandler",
              "label": "_depositRecords",
              "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))",
              "src": "contracts/handlers/WETHHandler.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_uint8,t_mapping(t_uint64,t_bytes32))": {
              "label": "mapping(uint8 => mapping(uint64 => bytes32))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBridge": {
        "src": "contracts/interfaces/IBridge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_chainID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDepositExecute": {
        "src": "contracts/interfaces/IDepositExecute.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeProposal(bytes32,bytes)",
          "getType()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2612": {
        "src": "contracts/interfaces/IERC2612.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC3156FlashBorrower": {
        "src": "contracts/interfaces/IERC3156FlashBorrower.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC3156FlashLender": {
        "src": "contracts/interfaces/IERC3156FlashLender.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/IERCHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address)",
          "setBurnable(address)",
          "withdraw(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGenericHandler": {
        "src": "contracts/interfaces/IGenericHandler.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setResource(bytes32,address,bytes4,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeable": {
        "src": "contracts/upgradeable/AdminUpgradeable.sol:12",
        "version": {
          "withMetadata": "800ba517eefd698df00114ebb70cc04b434f3d8a1e92032a684ca9e2d4685732",
          "withoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5",
          "linkedWithoutMetadata": "e7295837f869649e08c87863d66af833cb10ce1b7ce6cf3290c1ce617df5c6d5"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__AdminUpgradeable_init(address)",
          "setCandidate(address)",
          "becomeAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminUpgradeable",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:16"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "candidate",
              "type": "t_address",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:17"
            },
            {
              "contract": "AdminUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "contracts/upgradeable/AdminUpgradeable.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BytesToTypes": {
        "src": "contracts/utils/BytesToTypes.sol:11",
        "version": {
          "withMetadata": "06b4665d1849ae22c3cc5453780b6f0a7a914a51726769d708b951aabf57de47",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Seriality": {
        "src": "contracts/utils/Seriality.sol:15",
        "version": {
          "withMetadata": "68e2488740099f527d5175dedf0eae1b106e8eee1d131f003baf1c506fe40eb2",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [
          "SizeOf",
          "TypesToBytes",
          "BytesToTypes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SizeOf": {
        "src": "contracts/utils/SizeOf.sol:11",
        "version": {
          "withMetadata": "f67b7aa5dc4fab95c3bce57b5677c0c8e417fe7f500827ecff03831824e69a74",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TypesToBytes": {
        "src": "contracts/utils/TypesToBytes.sol:11",
        "version": {
          "withMetadata": "a7e9d4c836642d8991511e7fbd7d3660e0ab1c153d56f4b7e7b73cb588e71f0e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "041c7f5b83abe05cc809b1547b51e6633a8cd597a1e5f16b47bde68fe3f0d63e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}