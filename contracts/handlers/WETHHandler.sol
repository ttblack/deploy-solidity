// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

import "../interfaces/IDepositExecute.sol";
import "./HandlerHelpers.sol";

import "../utils/ToString.sol";

/**
    @title Handles ERC20 deposits and deposit executions.
    @author ChainSafe Systems.
    @notice This contract is intended to be used with the Bridge contract.
 */
contract WETHHandler is IDepositExecute, HandlerHelpers,ToString{

    struct DepositRecord {
        address _tokenAddress;
        uint8 _destinationChainID;
        bytes32 _resourceID;
        bytes _destinationRecipientAddress;
        address _depositer;
        uint256 _amount;
        bytes   _signData;
    }

    // depositNonce => Deposit Record
    mapping(uint8 => mapping(uint64 => DepositRecord)) public _depositRecords;

    event LogString(
        string data
    );
    /**
        @param bridgeAddress Contract address of previously deployed Bridge.
        @param initialResourceIDs Resource IDs are used to identify a specific contract address.
        These are the Resource IDs this contract will initially support.
        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be
        called to perform various deposit calls.
        @param burnableContractAddresses These addresses will be set as burnable and when {deposit} is called, the deposited token will be burned.
        When {executeProposal} is called, new tokens will be minted.

        @dev {initialResourceIDs} and {initialContractAddresses} must have the same length (one resourceID for every address).
        Also, these arrays must be ordered in the way that {initialResourceIDs}[0] is the intended resourceID for {initialContractAddresses}[0].
     */
    constructor(
        address bridgeAddress,
        bytes32[] memory initialResourceIDs,
        address[] memory initialContractAddresses,
        address[] memory burnableContractAddresses
    ) public{
        require(
            initialResourceIDs.length == initialContractAddresses.length,
            "initialResourceIDs and initialContractAddresses len mismatch"
        );

        _bridgeAddress = bridgeAddress;

        for (uint256 i = 0; i < initialResourceIDs.length; i++) {
            _setResource(initialResourceIDs[i], initialContractAddresses[i]);
        }

        for (uint256 i = 0; i < burnableContractAddresses.length; i++) {
            _setBurnable(burnableContractAddresses[i]);
        }
    }

    /**
        @param depositNonce This ID will have been generated by the Bridge contract.
        @param destId ID of chain deposit will be bridged to.
        @return DepositRecord which consists of:
        - _tokenAddress Address used when {deposit} was executed.
        - _destinationChainID ChainID deposited tokens are intended to end up on.
        - _resourceID ResourceID used when {deposit} was executed.
        - _lenDestinationRecipientAddress Used to parse recipient's address from {_destinationRecipientAddress}
        - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain.
        - _depositer Address that initially called {deposit} in the Bridge contract.
        - _amount Amount of tokens that were deposited.
    */
    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory)
    {
        //emit LogString("come to wethhander getDepositRecord");
        return _depositRecords[destId][depositNonce];
    }

    /**
        @notice A deposit is initiatied by making a deposit in the Bridge contract.
        @param destinationChainID Chain ID of chain tokens are expected to be bridged to.
        @param depositNonce This value is generated as an ID by the Bridge contract.
        @param depositer Address of account making the deposit in the Bridge contract.
        @param data Consists of: {resourceID}, {amount}, {lenRecipientAddress}, and {recipientAddress}
        all padded to 32 bytes.
        @notice Data passed into the function should be constructed as follows:
        amount                      uint256     bytes   0 - 32
        recipientAddress length     uint256     bytes  32 - 64
        recipientAddress            bytes       bytes  64 - END
        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is
        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.
     */
    function deposit(
        bytes32 resourceID,
        uint8 destinationChainID,
        uint64 depositNonce,
        address depositer,
        bytes calldata data
    ) external override onlyBridge {

        // bytes memory recipientAddress;
        uint256 amount;
        // uint256 lenRecipientAddress;

        emit LogString("come to wethhander deposit");

        amount = _bytesToUint(data.slice(0, 32),0);
        emit LogString(uintToString(amount));

        bytes memory destinationRecipientAddress;
        destinationRecipientAddress = data.slice(32, 20);

        emit LogString(bytesToString(destinationRecipientAddress));
        emit LogString("deposit to 1.5");


        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];
        require(
            _contractWhitelist[tokenAddress],
            "provided tokenAddress is not whitelisted"
        );

        //xxl debug
        emit LogString("weth deposit data start ...");
        //emit LogString(bytesToString(data.slice(INIT_START_POS + 32, TOTAL_SIZE)));
        // emit LogString("weth amount ");
        // emit LogString(uintToString(amount));
        // emit LogString("weth recipientAddress ");
        // emit LogString(bytesToString(recipientAddress));
        // emit LogString("weth deposit data end ");

        // lockWETH(tokenAddress, depositer, address(this), amount);
        _depositRecords[destinationChainID][depositNonce] = DepositRecord(
            tokenAddress,
            destinationChainID,
            resourceID,
            destinationRecipientAddress,
            depositer,
            amount,
            data.slice(INIT_START_POS, TOTAL_SIZE)
        );
    }



    /**
        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.
        by a relayer on the deposit's destination chain.
        @param data Consists of {resourceID}, {amount}, {lenDestinationRecipientAddress},
        and {destinationRecipientAddress} all padded to 32 bytes.
        @notice Data passed into the function should be constructed as follows:
        amount                                 uint256     bytes  0 - 32
        destinationRecipientAddress length     uint256     bytes  32 - 64
        destinationRecipientAddress            bytes       bytes  64 - END
     */
    function executeProposal(bytes32 resourceID,address[DPOS_NUM] memory signers, bytes calldata data)
        external
        override
        onlyBridge
        returns(bool,bool,address,uint256)
    {
        emit LogString("xxl come to wethhander executeProposal");
        uint256 amount = 0;

        amount = _bytesToUint(data.slice(0, 32),0);
        emit LogString(uintToString(amount));

        LogString("come to 1.5");
        LogString(addressToString(signers[0]));
        LogString("come to 1.6");
        bool verified = _verifyAbtFromCallData(signers,data);
        if(verified == false){
            return (false,false,address(this),0);
        }
        emit LogString("come to verified OK ");

        bytes memory destinationRecipientAddress;
        destinationRecipientAddress = data.slice(32, 20);

        bytes20 recipientAddress;
        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];

        emit LogString("come to 3");
        assembly {
            recipientAddress := mload(add(destinationRecipientAddress, 0x20))
        }

        emit LogString("come to erc20handle 1");
        require(
            _contractWhitelist[tokenAddress],
            "provided tokenAddress is not whitelisted"
        );

        emit LogString("amount ");
        emit LogString(uintToString(amount));

        emit LogString("recipientAddress ");
        emit LogString(addressToString(address(recipientAddress)));
        
        //_safeTransferETH(address(recipientAddress), amount);
        // emit LogString("come to transferWETH");

        return (true,verified,address(recipientAddress),amount);

    }

    /**
     * @dev Internal accounting function for moving around L1 ETH.
     *
     * @param _to L1 address to transfer ETH to
     * @param _value Amount of ETH to send to
     */
    function _safeTransferETH(
        address _to,
        uint256 _value
    )
        public
    {
        (bool success, ) = _to.call{value: _value}(new bytes(0));
        //console.log(success);

        if(!success){
            emit LogString("token call failed ");
        }
        //require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
    }

    receive()
        external
        payable
    {

    }


}
